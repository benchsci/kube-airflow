# VERSION 1.8.0.0
# AUTHOR: Yusuke KUOKA
# DESCRIPTION: Docker image to run Airflow on Kubernetes which is capable of creating Kubernetes jobs
# BUILD: docker build --rm -t mumoshu/kube-airflow
# SOURCE: https://github.com/mumoshu/kube-airflow

FROM    ubuntu:18.04
MAINTAINER David Q Chen <david@benchsci.com>

# Never prompts the user for choices on installation/configuration of packages
ENV     DEBIAN_FRONTEND noninteractive
ENV     TERM linux

# Airflow
ARG     AIRFLOW_VERSION=%%AIRFLOW_VERSION%%
ENV     AIRFLOW_HOME /usr/local/airflow
ENV     EMBEDDED_DAGS_LOCATION=%%EMBEDDED_DAGS_LOCATION%%
ENV     REQUIREMENTS_TXT_LOCATION=%%REQUIREMENTS_TXT_LOCATION%%
ENV     SLUGIFY_USES_TEXT_UNIDECODE=yes

# Define en_US.
ENV     LANGUAGE en_US.UTF-8
ENV     LANG en_US.UTF-8
ENV     LC_ALL en_US.UTF-8
ENV     LC_CTYPE en_US.UTF-8
ENV     LC_MESSAGES en_US.UTF-8
ENV     LC_ALL en_US.UTF-8

WORKDIR /requirements
# Only copy needed files
COPY    requirements/airflow.txt /requirements/airflow.txt
COPY    ${REQUIREMENTS_TXT_LOCATION} /requirements/dags.txt


RUN         set -ex \
        &&  buildDeps=' \
                build-essential \
                libblas-dev \
                libffi-dev \
                libkrb5-dev \
                liblapack-dev \
                libsasl2-dev \
                libssl-dev \
                libxml2-dev \
                libxslt1-dev \
                zlib1g-dev \
            ' \
        &&  apt-get update -yqq \
        &&  apt-get install -yqq --no-install-recommends \
                $buildDeps \
                apt-utils \
                python-pip \
                curl \
                git \
                libpq-dev \
                locales \
                netcat \
                python-dev \
        &&      sed -i 's/^# en_US.UTF-8 UTF-8$/en_US.UTF-8 UTF-8/g' /etc/locale.gen \
        &&  locale-gen \
        &&  update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 \
        &&  useradd -ms /bin/bash -d ${AIRFLOW_HOME} airflow

RUN     set -ex \        
        && pip install --upgrade pip setuptools \
        && rm -rf /usr/lib/python2.7/dist-packages/pip \
        && rm /usr/bin/pip \
        && ln -s /usr/local/bin/pip /usr/bin/pip \
        # &&  if [ ! -e /usr/bin/python ]; then ln -sf /usr/bin/python3 /usr/bin/python; fi \
        &&  pip install -r /requirements/airflow.txt \
        &&  pip install -r /requirements/dags.txt \
        &&  apt-get remove --purge -yqq $buildDeps \
        &&  apt-get clean \
        &&  rm -rf \
                /var/lib/apt/lists/* \
                /tmp/* \
                /var/tmp/* \
                /usr/share/man \
                /usr/share/doc \
                /usr/share/doc-base

ENV         KUBECTL_VERSION %%KUBECTL_VERSION%%

RUN         curl -L -o /usr/local/bin/kubectl \
                https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl \
        &&  chmod +x /usr/local/bin/kubectl


# JAVA INSTALLATION
RUN apt-get update && apt-get install -y \
        gnupg \
        python-psycopg2 \    
        libpq-dev \                    
        enchant \
        software-properties-common

RUN apt-add-repository ppa:webupd8team/java

## JAVA INSTALLATION
## source: https://hub.docker.com/r/anapsix/docker-oracle-java8/~/dockerfile/ 
RUN echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections
RUN echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main" > /etc/apt/sources.list.d/webupd8team-java-trusty.list
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886
RUN set -ex \ 
        && apt-get update  \
        && mkdir -p /usr/share/man/man1 \
        && DEBIAN_FRONTEND=noninteractive apt-get install -y \ 
        --allow-downgrades --allow-remove-essential --allow-change-held-packages \
        --no-install-recommends oracle-java8-installer \
        && apt-get clean all


# RUN apt-get update && apt-get install libpq-dev 

COPY libs/scinapsis_mining /build/scinapsis_mining
COPY libs/vendor_automation /build/vendor_automation

RUN pip install cython
RUN pip install -r /build/scinapsis_mining/requirements.txt
RUN pip install -r /build/vendor_automation/requirements.txt

RUN python /build/scinapsis_mining/setup.py install
RUN python /build/vendor_automation/setup.py install 


COPY        script/entrypoint.sh ${AIRFLOW_HOME}/entrypoint.sh
COPY        config/airflow.cfg ${AIRFLOW_HOME}/airflow.cfg
COPY        script/git-sync ${AIRFLOW_HOME}/git-sync
COPY        ${EMBEDDED_DAGS_LOCATION} ${AIRFLOW_HOME}/dags
COPY        script/git-sync ${AIRFLOW_HOME}/git-sync

RUN         chown -R airflow: ${AIRFLOW_HOME} \
        &&  chmod +x ${AIRFLOW_HOME}/entrypoint.sh \
        &&  chmod +x ${AIRFLOW_HOME}/git-sync

EXPOSE  8080 5555 8793
USER        airflow
WORKDIR     ${AIRFLOW_HOME}
ENTRYPOINT  ["./entrypoint.sh"]
